export declare class TestObject {
    static PRIVATE_FUNCTION_NAME: string;
    static PRIVATE_GETTER_NAME: string;
    static PRIVATE_SETTER_NAME: string;
    static PRIVATE_GETTER_AND_SETTER_NAME: string;
    static staticFunctionCalled: () => void;
    onNoArgumentsFunctionCalled: () => void;
    onOneArgumentsFunctionCalled: (arg1: any) => void;
    onManyArgumentsFunctionCalled: (arg1: any, arg2: any, arg3: any) => void;
    onReturnung1FunctionCalled: () => void;
    onPrivateFunctionCalled: (arg1: any) => void;
    onGetterCalled: () => void;
    onSetterCalled: (value: any) => void;
    onGetterOfGetterAndSetterCalled: () => void;
    onSetterOfGetterAndSetterCalled: (value: any) => void;
    onPrivateGetterCalled: () => void;
    onPrivateSetterCalled: (value: any) => void;
    onPrivateGetterOfGetterAndSetterCalled: () => void;
    onPrivateSetterOfGetterAndSetterCalled: (value: any) => void;
    getterValue: any;
    setterValue: any;
    getterAndSetterValue: any;
    privateGetterValue: any;
    privateSetterValue: any;
    privateGetterAndSetterValue: any;
    complexReturnFunction(): TestObject;
    readonly complexGetterFunction: TestObject;
    readonly getter: any;
    setter: any;
    getterAndSetter: any;
    static staticFunction(): void;
    noArgumentsFunction(): void;
    oneArgumentsFunction(arg1: any): void;
    manyArgumentsFunction(arg1: any, arg2: any, arg3: any): void;
    returning1Function(): number;
    callPrivateFunction(arg1: any): number;
    private _privateFunction(arg1);
    callPrivateGetter(): any;
    callPrivateSetter(value: any): void;
    callPrivateGetterOfGetterAndSetter(): any;
    callPrivateSetterOfGetterAndSetter(value: any): void;
    private readonly _privateGetter;
    private _privateSetter;
    private _privateGetterAndSetter;
}
